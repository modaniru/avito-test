// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Disk is an autogenerated mock type for the Disk type
type Disk struct {
	mock.Mock
}

// CreateFile provides a mock function with given fields: name, data
func (_m *Disk) CreateFile(name string, data []byte) (string, error) {
	ret := _m.Called(name, data)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) (string, error)); ok {
		return rf(name, data)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) string); ok {
		r0 = rf(name, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(name, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAvailible provides a mock function with given fields:
func (_m *Disk) IsAvailible() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewDisk creates a new instance of Disk. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisk(t interface {
	mock.TestingT
	Cleanup(func())
}) *Disk {
	mock := &Disk{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
